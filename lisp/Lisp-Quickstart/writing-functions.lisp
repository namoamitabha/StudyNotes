[angelo@centos ~]$ clisp
  i i i i i i i       ooooo    o        ooooooo   ooooo   ooooo
  I I I I I I I      8     8   8           8     8     o  8    8
  I  \ `+' /  I      8         8           8     8        8    8
   \  `-+-'  /       8         8           8      ooooo   8oooo
    `-__|__-'        8         8           8           8  8
        |            8     o   8           8     o     8  8
  ------+------       ooooo    8oooooo  ooo8ooo   ooooo   8

Welcome to GNU CLISP 2.49 (2010-07-07) <http://clisp.cons.org/>

Copyright (c) Bruno Haible, Michael Stoll 1992, 1993
Copyright (c) Bruno Haible, Marcus Daniels 1994-1997
Copyright (c) Bruno Haible, Pierpaolo Bernardi, Sam Steingold 1998
Copyright (c) Bruno Haible, Sam Steingold 1999-2000
Copyright (c) Sam Steingold, Bruno Haible 2001-2010

Type :h and hit Enter for context help.

[1]> (defun do-hello-world ()
	"Hello, World!")
DO-HELLO-WORLD
[2]> (do-hello-world)
"Hello, World!"
[3]> (defun add-four (x)
	(+ x 4))
ADD-FOUR
[4]> (add-four 7)
11
[5]> (defun hypoteneuse (length width)
	(sqrt (+ (* length length)
		 (* width width))))
HYPOTENEUSE
[6]> (hypoteneuse 7 9)
11.401754
[7]> (defun first-n-chars (string n reverse-first)
	(if reverse-first
		(subseq (reverse string) 0 n)
		(subseq string 0 n)))
FIRST-N-CHARS
[8]> (first-n-chars "hello world" 5 nil)
"hello"
[9]> (first-n-chars "hello world" 5 t)
"dlrow"
[10]> (first-n-chars "hello world" 5 18)
"dlrow"
[11]> (defun print-string-stuff (string-1)
	(print string-1)
	(print (reverse string-1))
	(print (length string-1))
	string-1)
PRINT-STRING-STUFF
[12]> (print-string-stuff "Hello, World!")

"Hello, World!" 
"!dlroW ,olleH" 
13 
"Hello, World!"
[13]> (setf my-global-counter 0)
0
[14]> (defun increment-global-and-multiply (by-me)
	(setf my-global-counter (1+ my-global-counter))
	(* my-global-counter by-me))
INCREMENT-GLOBAL-AND-MULTIPLY
[15]> (increment-global-and-multiply 3)
3
[16]> (increment-global-and-multiply 5)
10
[17]> (increment-global-and-multiply 4)
12
[18]> (increment-global-and-multiply 7)
28
[19]> (defun factorial (n)
	(let ((sum 1))
	  (dotimes (x n)
	    (setf sum (* sum (1+ x))))
	  sum))
FACTORIAL
[20]> (factorial 1000)

[21]> 

2       
2
[22]> (factorial 10)
3628800
[23]> (factorial 2)
2
[24]> (factorial 3)
6
[25]> (defun my-equation (n)
	(+ n (* (sin n) (cos n))))
MY-EQUATION
[26]> (my-equation 2)
1.6215987
[27]> (defun weird-function (n)
		(setf n 4)
		n)
WEIRD-FUNCTION
[28]> (setf abc 17)
17
[29]> (weird-function abc)
4
[30]> abc
17
[31]> (defun factorial (n)
	  (if (<= n 0)
		1
		(* n (factorial (- n 1)))))
FACTORIAL
[32]> (factorial 5)
120
[33]> (factorial 1000)

[34]> (defun first-n-chars (string n &optional reverse-first)
	(if reverse-first
	  (subseq (reverse string) 0 n)
	  (subseq string 0 n)))
FIRST-N-CHARS
[35]> (first-n-chars "hello world" 5 nil) 
"hello"
[36]> (first-n-chars "hello world" 5)
"hello"
[37]> (first-n-chars "hello world" 5 t)
"dlrow"
[38]> (defun multiply-then-maybe-add (x y &optional (z 0))
	(+ (* x y) z))
MULTIPLY-THEN-MAYBE-ADD
[39]> (multiply-then-maybe-add 9 2)
18
[40]> (multiply-then-maybe-add 9 2 7)
25
[41]> (defun first-n-chars (string n
		&key reverse-first
		     (capitalize-first t))
	(let ((val (if capitalize-first
			(string-upcase string)
			string)))
	  (if reverse-first
	    (subseq (reverse val) 0 n)
	    (subseq val 0 n))))
FIRST-N-CHARS
[42]> (first-n-chars "hello world" 5 :revese-first t)

*** - FIRST-N-CHARS: illegal keyword/value pair :REVESE-FIRST, T in argument
      list.
      The allowed keywords are (:REVERSE-FIRST :CAPITALIZE-FIRST)
The following restarts are available:
ABORT          :R1      Abort main loop
Break 1 [43]> :R1
[44]> (first-n-chars "hello world" 5 :reverse-first t)
"DLROW"
[45]> (first-n-chars "hello world" 5
		:reverse-first t :capitalize-first nil)
"dlrow"
[46]> (first-n-chars "hello world" 5
		:capitalize-first nil :reverse-first t)
"dlrow"
[47]> (first-n-chars "hello world" 5)
"HELLO"
[48]> (first-n-chars "hello world" 5 :capitalize-first nil)
"hello"
[49]>     
