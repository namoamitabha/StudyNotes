* Lisp
** Study lisp with causes from MIT
*** TODO LEC1
    1. Issue: how to run example
       #+BEGIN_SRC 
	(defun A (+ 5 5))
	(* A A)
	'error:Symbol's value as variable is void: A
	;;should be fixed as
	(defun A () (+ 5 5))
	(* (A) (A))
	;;ref: Y分钟学Elisp http://www.tuicool.com/articles/buInem
       #+END_SRC

    2. Issue: how to run example
       #+BEGIN_SRC 
	(defun square (lambda (x) (* x x)))
	(square 10)
       #+END_SRC
    3. Issue: the value is not expected that same as video
       1. calculate is more near to video but my value is: 
       #+BEGIN_SRC 
       (defun square (x) (* x x))
       (square 10)
       (square 1001)
       (square (+ 5 7))
       (+ (square 3) (square 4))
       (square (square (square 1001))) ;; the value is not expectd that same as video
       #+END_SRC
    4. video: 48:40, 3/22/2015
    5. 
*** TODO LEC2
** Cause details
** DONE Common Lisp Implementations: A Survey
   CLOSED: [2015-04-11 Sat 11:18]
   - State "DONE"       from "TODO"       [2015-04-11 Sat 11:18]
   1. ref: https://www.common-lisp.net/~dlw/LispSurvey.html
   2. select implementation of lisp as "GNU CLISP"
      1. because:GPL, and run on linux/Unix/Mac/Windows
      2. GNU CL
   3. GNU CLISP
   4. ref: http://www.clisp.org/
   5. Issue: how to install clisp on centos7
** DONE GNU CLISP
   CLOSED: [2015-04-11 Sat 11:18]
   - State "DONE"       from "TODO"       [2015-04-11 Sat 11:18]
   1. http://www.clisp.org/
   2. how to install clisp on centos
   3. clisp not available on centos

** DONE Gnu CL (GCL)
   CLOSED: [2015-04-11 Sat 11:18]
   - State "DONE"       from "TODO"       [2015-04-11 Sat 11:18]
   1. http://www.gnu.org/software/gcl/
   2. 

** DONE Steel Bank CL (SBCL)
   CLOSED: [2015-04-11 Sat 11:18]
   - State "DONE"       from "TODO"       [2015-04-11 Sat 11:18]
   1. http://www.sbcl.org/
   2. install on centos: http://www.lcs.wang/?p=47
   3. sudo yum install sbcl http://www.lcs.wang/?p=47
   4. http://www.sbcl.org/getting.html
** DONE Install clisp on centos
   CLOSED: [2015-04-07 Tue 09:44]
   - State "DONE"       from "TODO"       [2015-04-07 Tue 09:44]
   1. following instructions in /home/angelo/tools/clisp-2.49/unix/INSTALL
   2. issue: configure without libsigsegv
   3. libsigsegv still cannot be detected by clisp
   4. no idea about the root cause
** DONE [LISP]Lisp quickstart 1 & 2
   CLOSED: [2015-04-11 Sat 07:45]
   - State "DONE"       from "TODO"       [2015-04-11 Sat 07:45]
   1. ref: http://cs.gmu.edu/~sean/lisp/LispTutorial.html
      1. Lisp string does not terminate with a \0
      2. For tab and return, you can just type tab or return right in the string itself.
      3. nil means false
      4. Every other expression but nil is "true". Official constant t is true
      5. symbol is a series of characters which typically do not contain whitespace, parentheses, pound, quote, double-quote, period, or backquote and among a few others
	 1. Evaluating lists as functions
	    1. Symbols don't take the form of numbers
	    2. Common for symbols to have hyphens(-) or asterisks (*) in them
	    3. case-insensitive
	    4. in lisp, there are no operators, instead, there are only functions
	    5. predicates, return "true" (t) or "false" (nil). traditionally, many lisp predicate names end with a p. such as "numberp", "oddp"
	    6. print: evalutes its argument, then prints it, then returns the argument.
	 2. Control structures and Variables
	    1. function rule: evaluate each argument exactly one time each
	    2. macros or special forms
	       1) used as control structures
	       2) (if test-expression then-expression optional-else-expression)
	       3) if only allows one test-expression, one then-expression, and one optional-else-expression.
	       4) if you need do three things? You need make a block
	    3. progn, (progn expr1 expr2 expr3 ...)
	       1. progn can take any number of expressions, and evaluates each of its expressions in order. progn then returns the value of the last expression
	    4. symbols are also expressions except when they're at the head of a list
	    5. a symbol represents a variable when it's not the head of a list
	    6. Variable are set with macro setf
	       1. (setf variable-symbol expression)
	       2. Lisp doesn't need to declare variables before they are used
	       3. setf will make global variables, unless variables are declared to be local
	    7. let declares local variables with each declaration
	       1) (let (declaration1 declaration2 ...) expr1 expr2 ...)
	       2) let gets rid of the local variables and returns the value of the last expression.
	       3) local variables are only declared within the scope of the let expression
	       4) use setf to change the value of a local variable inside a let statement
	       5) can nest let statements within other let statements
	       6) Locally declared variables may shadow outer local and global variables with the same name
	    8. a list might be a special form or macro is because it repeatedly evaluates its arguments
	    9. (dotimes (var high-val optional-return-val) expr1 expr2 ...)
	 3. Writing functions
	    1. defun, function-making macro
	    2. (defun function-name-symbol (param1 param2 param3 ...) expr1 expr2 expr3 ...)
	    3. Surprisingly rare in Lisp to have more than one expression in a function. Intead, expressions tend to get nested together.
	    4. Lisp functions tend to take on functional form rather than declarative form.
	    5. Lisp is pass-by-value. Parameters of a function are considered to be local variables.
	    6. List style often makes heavy use of recursion
	    7. &optional, speical term to make functions with an optional argument followed by the optional parameter name, at the end of your parameter list
	       1. Can provide default value for optional parameter by following &optional not by a parameter name but by a list of the form (param-name default-value)
	       2. can only have one optional parameter
	    8. &key, keyword parameters, appear at the end of a parameter list after the term &key
	       1. Don't use optional parameter and keyword parameter at same time. Gets confusing.
	       2. Many built-in lisp functions use losts of keyword parameters to "extend" then!
	       3. Pass keyword parameter whose name is foo into a function by using the term :foo followed by the value to set foo to.
	       4. Keyword parameters can be passed in in any order, but must appear at the end of the parameter list.
	    9. Lists and Symbols as Data
	       1. Lists are normally evaluated as function or macro calls
	       2. Symbols are normally evaluated as variable references.
	       3. Lists and symbols are data as well
	       4. quote, can used to bypass the evaluation of its argument
	       5. list, is a singly-linked list
		  1. first, car, return the first item in list, old name of first is car
		  2. rest, cdr, return a list consisting of everything but the first item. The old name of rest is cdr
		  3. append, hooks multiple lists tegother
		  4. cons, takes an item and a list, and return a new list consisting of the old list with the item tacked on the front
	       6. ', special abbreviation for quote. '(a b c d e) is same as (quote (a b c d e))
	       7. In data form, the first item of a list can be anything -- it's not restricted to be just a symbol
	       8. nil, isn't just "false". It's also the empty list, '()
	       9. dolist, iterates over a list
		  1. (dolist (var list-to-iterate-over optional-return-val) expr1 expr2 ...)
	       10. Lists and strings share a common supertype, sequences.
	       11. All sequence functions work on any kind of sequence (including strings and lists).
	    10. Loading and Compiling Lisp
		1. You can time the speed of any expression, and its garbage collection, with the time function
		2. interpreter
		3. compiler
		4. load, to load script file directly
		   1. use :print t to print all output
		5. compile-file function, to compile a whole file
		   1. Object file will have extension as .fas or .fsl or .fasl, or afasl
		   2. To use load to load object files.
		   3. In general, to be safe, always load the full name of the file including the extension
		   4. With very few exceptions, you should never use global variables when you can use local variables instead
	    11. Lisp Style
		1. Lisp programmers don't rely much on the parentheses when reading code. Instead, they rely heavily on breaking expressions into multiple lines and indenting them in a very peculiar way
		2. Formatting rules:
		   1. Put a single space between each item in a list.
		   2. Do NOT put space between the opening parenthesis and the first item in a list. Similarly, do NOT put space between the closing parenthesis and the last item.
		   3. Never put parentheses all by themselves on lines like a C++/Java brace. Do not be afraid to pile up parentheses at the end of a line.
		3. Comments
		   1. #, Winged comments, equivalent of /* and */ in C++, not commonly used in Lisp
		   2. ;, inline comments, end with a return
		   3. ;;, common in Lisp to pile up several semicolons ;; or ;;; to make the comment more visible
		   4. common approach:
		      1. Use one semicolon for inline code.
		      2. Use two semicolons to comment the head of a function.
		      3. Use three semicolons to comment the head of a file or other big region.
		      4. Use winged comments only to comment-out a region temporarily.
		4. Many Lisp structures have buit-in documentation comments.
		   1. For example, if the first expression in a defun staement is a string, that string is not part of the code but instead is considered to be the "documentation" for the function
		   2. You can access the documentation for an object with the documentation function
		   3. documentation
		   4. describe
		5. Lisp has important style rules about symbols, used for both variables and function names.
		   1. Although Lisp symbols are case-insensitive, ALWAYS use lower-case.
		   2. Do NOT use underscores in symbols. Use hyphens
		   3. Although the previous examples above didn't do it to avoid confusing you, you should always denote global variables by wrapping them with *asterisks*. Global variable names should also be self-explanatory.
		   4. Variable names should be nouns.
		   5. Function names should be verbs.
		   6. Though you can always name variables the same names as functions, it's more readable not to do so.
		6. Lisp is a functional language.
		   1. Learn to use functional style.
		   2. One way you can tell you're using functional style is if you have very few (or even no) local variables, and rarely if ever use a global variable
		   3. As Paul Graham says, "treat setf as if there were a tax on its use"
		7. Global variables
		   1. Declare your global variables once with defparameter before you start using them in setf statements.
		      1. (defparameter var-symbol initial-value optional-documentation-string)
		   2. Declare global constants with defconstant.
		      1. (defconstant var-symbol value optional-documentation-string)
		8. 
      6. lists, 
      7. atom is every expression that is not a list
   2. Lisp II : http://cs.gmu.edu/~sean/lisp/LispTutorial2.html
      1. Arrays and Vectors
	 1. simple-vector
	    1. Arrays guaranteed to have certain types
	    2. Arrays can hold anything
	    3. make-array, (make-array length), makes a one-dimensional fixed-length array, and elements are each initialized to nil
	    4. #(a b c)
	    5. svref, (svref simple-vector index), to extract the element of simple vectors (aref just calls svref for simple vectors)
	 2. multidimensional array
	    1. (make-array dimension-list), makes an N-dimensional fixed-length array of the dimensions given by elements in the list. And each are initialized to nil
	    2. aref, (aref array index1 index2 ...), to extract the element of any array
	    3. #nA(...), special form
	 3. Variable-length vector
	    1. :adjustable and :fill-pointer,
	    2. (make-array length :file-pointer t :adjustable t)
	    3. can have a zero-length vector
	    4. vector-push-extend, can tack new stuff onto the end of a variable-length vector
	    5. vector-pop, can "pop" elements off the end of the variable-length vector
	    6. Multidimensional arrays can also have their sizes adjusted
	 4. string
	    1. a vector of characters
	    2. can access elements with aref
	    3. not simple vector and cannot use svref (no idea why? why?)
	    4. char, (char string index), same function as aref,
      2. Setf and Friends
	 1. setf
	    1. "sees to it"
	    2. (setf (aref array indices...) val)
	    3. donot use it to modify lists
	    4. Stick with modifying arrays and strings
	 2. incf, decf
	    1. incf, a variant of setf
	    2. like ++ operator in C++
	    3. works on all sorts of things (array slots, etc.) in addition to just variables
	    4. (incf expression 4), by adding 4
	    5. (incf expression), by adding 1
	    6. decf, does the opposite
	 3. push, pop
	    1. push, can be used to "see to it" that an expression (which must evalute to a list) now evaluates to a list with an element tacked onto the front of it
	    2. (push val expression), same as (setf expression (cons val expression))
	    3. pop, can also "see to it" that a list has an element removed from the front of it
	    4. (pop expression)
	 4. rotatef
	    1. rotatef, can be used to swap several elements
	    2. (rotatef expression1 expression2 ... expressionN)
	    3. (rotatef expression1 expression2), which sees to it that the values of expression1 and expression2 are swapped
	    4. 
      3. Function, Funcall, and Apply
	 1. function
	    1. In Lisp, pointers to functions are first-class data objects. They can be stored in variables, passed into arguments, and returned by other functions.
	    2. function, will return a pointer to a function
	    3. (function function-symbol)
	    4. function doesn't evalute its argument -- instead it just looks up the function by that name and returns pointer to it
	    5. #'print, sam as (function print)
	    6. Keep in mind that you can only get pointers to functions, not macros or special forms.
	    7. attention: variable with pointer to function, can not be used to call function in lisp
	    8. attention: the first item in an evaluated list must be a symbol which is not evaluated. If a variable could be put as the first item, it would have to be evaluated first (to extract the function pointer)
	    9. Common lisp can associate a function with a symbol (by using defun) and it can also associate a value with the same symbol as a variable (by using setf).
	    10. Lisp2, a lisp which can associate two or more different kinds of things at the same time with a symbol
	    11. Common lisp and emacs lisp are lisp 2
	    12. Scheme is a lisp 1
	 2. funcall
	    1. (funcall function-pointer arg1 arg2 ...)
	    2. funcall, a function which evaluates function-pointer, which returns a pointer to a function, then it evaluates each of arguments, then passes the argument values into the function.
	    3. funcall returns the value of the function
	 3. apply
	    1. apply, takes a function pointer, plus one more argument which must evaluate to a list
	    2. (apply function-pointer list-arg)
	    3. (apply function-pointer arg1 arg2 ... list-arg)
      4. Mapping
	 1. Lisp uses pointers to functions everywhere
	 2. mapcar, mapping functions
	    1. Mapping, applies a function repeatedly over one or more lists, resulting in a new list
	    2. (mapcar function-pointer list)
	    3. (mapcar function-pointer list1 list2 ...)
	    4. If function-pointer points to a function which takes N arguments, then we must provide N lists
	    5. map, mapc, mapcan, mapcon ...
	 3. reduce, composing a function in on itself
	    1. (reduce function-pointer list)
	    2. function-pointer must point to a function which takes exactly two arguments
	    3. :from-end t keyword argument, change the order of operations
      5. Lambda and Closures
	 1. lambda expression, one of the more powerful concepts in Lisp
	    1. A lambda expression is an anonymous function, that is one that doesn't have a name -- just a pointer to it
	    2. (function (lambda (args...) body ...))
	    3. lambda expression returns a pointer to the function
	    4. #'(lambda (args...) body ...)
	    5. (lambda (args...) body...), lambda here is a macro in common lisp, but not recommend to use
	 2. closures, is lambda expressions
	    1. closure, a function bundled together with its own lexical scope
	    2. a function plus its own personal, private global variables
	    3. function-building functions
	    4. (defun build-a-function (x) #'(lambda (y) (+ x y)))
	    5. Closures, are also common when we need to make a quick custom function based on information the user provided
	    6. Notice: lambda expression is converted into a function even though it refers to val outside the lambda expression
	    7. seed becomes a private global variable of the function rand. No one else can see it but rand
		#+BEGIN_SRC 
		(let ((seed 1234))
		  (defun rand ()
		    (setf seed (mod (* seed 16807) 2147483647))))
		#+END_SRC
	    8. share a common private variable called account that no one else can see
		#+BEGIN_SRC 
		(let ((account 0))
		  (defun deposit ($$$)
		    (setf account (+ account $$$)))
		  (defun withdraw ($$$)
		    (setf account (- account $$$)))
		  (defun amount ()
		    acount))
		#+END_SRC
	    9. Lisp can be easily modified to do rather OOP built on top of closures.
	    10. It comes with an OOP system, CLOS, as part of the language
      6. Sequence Functions
	 1. Vectors (both simple and variable-length), lists and strings are all sequencs.
	 2. Multidimensional arrays are not sequences.
	 3. sequence function (duh), a function which works with any kind of equence
	 4. length, reverse, subseq, elt
	 5. elt
	    1. (el sequence index)
	    2. elt, returns element #index in the sequence
	    3. elt, works with a variety of data types, but as result is slower than custom-made functions for each data type
	    4. aref, for string
	    5. svref, for simple-vector
	    6. nth, for lists
	 6. copy-seq, makes a duplicate copy of a sequence. It doesnot copy the elements (both sequences will point to the same elemetns)
	 7. concatenate
	    1. concatenate, concatenates copies of sequences together, producing a new sequence of a given type.
	    2. The original sequences can be different types
	    3. (concatenate new-sequence-type sequences...)
	    4. new-sequence-type is a quoted symbol representing the type of the new sequence.
	       1. 'simple-vector, simple vector
	       2. 'list, list
	       3. 'string, string
	 8. make-sequence
	    1. builds a sequence of a given type and length
	    2. Like elt, it is a general function (it calls faster, more type-specific functions underneath)
	    3. (make-sequence sequence-type length)
	    4. :initial-element
	 9. host of sequence-manipulative functions have very similar forms:
	    1. either destructive or non-destructive, either they modify or destroy the original sequence to achieve their goals (faster), or they make a copy of the sequence first
	    2. three versions, the function, the -if version, and the -if-not version
	       1. count, count-if, count-if-not
	       2. (count object sequence keywords...)
	       3. (count-if test-predicate sequence keywords...)
	       4. (count-if-not test-predicate sequence keywords...)
	    3. optional keyword arguments:
	       1. :key
	       2. :from-end t
	       3. :start and :end
	    4. find, returns the first element matching the pattern
	    5. position, returns the index of the first element matching the pattern
	    6. remove, removes all the elements matching the pattern from a copy of the sequence
	    7. substitute, replaces all the elements matching the pattern with some other element
	       1. (substitute[-if[-not]] thing-to-replace-with rest-of-arguments-as-before...)
	    8. search
	       1. searches for the first index where one subsequence appears in another sequence
	       2. (search subsequence sequence keywords...)
	       3. :key, :test, :test-not, :from-end, :start1, :end1, :start2, :end2
	    9. destructive form
	       1. There are no promises with destructive functions: they may or may not modify the original
	       2. should only use them on data that you don't care about any more
	       3. remove[-if[-not]], delete[-if[-not]]
	       4. substitute[-if[-not]], nsubstitute[-if[-not]]
	       5. reverse, nreverse
	       6. sort is destructive, (sort sequence predicate)
      7. Functions with Variable Arguments
	 1. &rest, can appear at the end of a parameter list in defun, followed by a parameter name
	 2. If a function call provides any extra arguments beyond those defined in parameter list, the additional arguments are all placed in a list, which the &rest parameter is set to.
	 3. Otherwise it is set to nil
	 4. Donot use &rest with keyword parameter and optional parameters in the same function.
** DONE [Lisp]Lisp quickstart3
   CLOSED: [2015-04-11 Sat 11:17]
   - State "DONE"       from "TODO"       [2015-04-11 Sat 11:17]
   1. http://cs.gmu.edu/~sean/lisp/LispTutorial3.html
   2. List Functions
      1. cons
      2. car
      3. cdr
      4. last
      5. butlast
      6. list
   3. Predicates and Types
   4. Hash Tables
   5. Printing and Reading
   6. More Control Structures
   7. Writing Lisp in Lisp
   8. More Debugging
   9. try to study practical common lisp instead

** TODO Study records
   1. [ ] Introduction to Computation: 3/20/2015
      1. [ ] lec1a_512kb.mp4
      2. [ ] TODO: upload lec7a_512kb.mp4 to yunpan.cn
   2. 
** TODO Lisp jobs
   1. https://lispjobs.wordpress.com/
   2. 
** TODO [lisp]Structure and Interpretation of Computer Programs
   1. course: http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-001-structure-and-interpretation-of-computer-programs-spring-2005/
   2. self study
      1. link: http://icampustutor.csail.mit.edu/6.001-public/
      2. account: crazy0man, pwd: cra740824
      3. book online: http://mitpress.mit.edu/sicp/full-text/book/book.html
      4. Lecture Notes: http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-001-structure-and-interpretation-of-computer-programs-spring-2005/lecture-notes/
      5. Readings: http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-001-structure-and-interpretation-of-computer-programs-spring-2005/readings/
      6. Video Lectures: http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-001-structure-and-interpretation-of-computer-programs-spring-2005/video-lectures/
      7. Recitations: http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-001-structure-and-interpretation-of-computer-programs-spring-2005/recitations/
      8. Exams: http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-001-structure-and-interpretation-of-computer-programs-spring-2005/exams/
      9. Projects: http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-001-structure-and-interpretation-of-computer-programs-spring-2005/projects/
      10. Tools: http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-001-structure-and-interpretation-of-computer-programs-spring-2005/tools/
	  1. Guide to MIT Scheme: http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-001-structure-and-interpretation-of-computer-programs-spring-2005/tools/scheme/
	  2. Revised(5) Report on the Algorithmic Language Scheme: http://people.csail.mit.edu/jaffer/r5rs_toc.html
      11. Related Resources: http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-001-structure-and-interpretation-of-computer-programs-spring-2005/related-resources/
   3. GNU CLISP
   4. 
** TODO MIT/GNU Scheme 9.4
   1. http://www.gnu.org/software/mit-scheme/documentation/mit-scheme-user/index.html#Top
   2. in emacs
   3. M-x load-library RET xscheme RET
   4. M-x run-scheme
** TODO [LISP]Lisp: Tears of Joy, Part 1
   1. http://www.opensourceforu.com/2011/06/lisp-tears-of-joy-part-1/

** TODO Practical Common Lisp
   CLOCK: [2015-04-14 Tue 07:41]--[2015-04-14 Tue 16:00] =>  8:19
   1. [X] Ch01 Introduction: Why Lisp?
   2. [X] Ch02 Lather, Rinse, Repeat: A Tour of the REPL
   3. [ ] Ch03 Practical: A Simple Database
      1. [ ] Follow book to exercise mp3 data base first
      2. [ ] Rewrite mp3 data base afterward all by myself
      3. [ ] 
   4. [ ] Ch04 Syntax and Semantics
   5. [ ] Ch05 Functions
   6. [ ] Ch06 Variables
   7. [ ] Ch07 Macros: Standard Control Constructs
   8. [ ] Ch08 Macros: Defining Your Own
   9. [ ] Ch09 Practical: Building a Unit Test Framework
   10. [ ] Ch10 Numbers, Characters, and Strings
   11. [ ] Ch11 Collections
   12. [ ] Ch12 They Called It LISP for a Reason: List Processing
   13. [ ] Ch13 Beyond Lists: Other Uses for Cons Cells
   14. [ ] Ch14 Files and File I/O
   15. [ ] Ch15 Practical: A Portable Pathname Library
   16. [ ] Ch16 Object Reorientation: Generic Functions
   17. [ ] Ch17 Object Reorientation: Classes
   18. [ ] Ch18 A Few FORMAT Recipes
   19. [ ] Ch19 Beyond Exception Handling: Conditions and Restarts
   20. [ ] Ch20 The Special Operators
   21. [ ] Ch21 Programming in the Large: Packages and Symbols
   22. [ ] Ch22 LOOP for Black Belts
   23. [ ] Ch23 Practical: A Spam Filter
   24. [ ] Ch24 Practical: Parsing Binary Files
   25. [ ] Ch25 Practical: An ID3 Parser
   26. [ ] Ch26 Practical: Web Programming with AllegroServe
   27. [ ] Ch27 Practical: An MP3 Database
   28. [ ] Ch28 Practical: A Shoutcast Server
   29. [ ] Ch29 Practical: An MP3 Browser
   30. [ ] Ch30 Practical: An HTML Generation Library, the Interpreter
   31. [ ] Ch31 Practical: An HTML Generation Library, the Compiler
   32. [ ] Ch32 Practical: Conclusion: What's Next?
